name: Scanner

on:
  issues:
    types:
      - opened

jobs:
  scan:
    name: Scan container Images
    if: ${{ !github.event.repository.is_template }}
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GRADR_TOKEN }}
      ISSUE_URL: ${{ github.event.issue.html_url }}
      ISSUE_BODY: ${{ github.event.issue.body }}
    
    steps:
      - name: Init
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release jo jq
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      # TASK/TODO: 
      # Build this step in the workflow. Refer to the linked document in the README for more details
      - name: TODO - Scan Vulnerabilities
        run: |
          echo "starting scan......"
          PASS="Total: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)"
          ISSUE_BODY_CLEAN=$(echo ${ISSUE_BODY} | sed 's/[][]//g' | sed 's/,/ /g' | sed 's/\"//g')
          echo $ISSUE_BODY_CLEAN
          declare -a arr=($ISSUE_BODY_CLEAN)
          rm result.txt out.txt | true
          touch result.txt
          for i in "${arr[@]}"
          do
            echo "Running scan for $i ......"
            trivy image --format template --template '{{- $critical := 0 }}{{- $high := 0 }}{{- $medium := 0 }}{{- $low := 0 }}{{- $unknown := 0 }}{{- range . }}{{- range .Vulnerabilities }}{{- if  eq .Severity "CRITICAL" }}{{- $critical = add $critical 1 }}{{- end }}{{- if  eq .Severity "HIGH" }}{{- $high = add $high 1 }}{{- end }}{{- if  eq .Severity "MEDIUM" }}{{- $medium = add $medium 1 }}{{- end }}{{- if  eq .Severity "LOW" }}{{- $low = add $low 1 }}{{- end }}{{- if  eq .Severity "UNKNOWN" }}{{- $unknown = add $unknown 1 }}{{- end }}{{- end }}{{- end }}Critical: {{ $critical }}, High: {{ $high }}, Medium: {{ $medium }}, Low: {{ $low }}, Unknown: {{ $unknown }}' $i > out.txt
            result=$( tail -n 1 out.txt )
            if [[ "$PASS" == "$result" ]]
            then
                echo "$i,SAFE" >> result.txt

            else
                echo "$i,NOT SAFE" >> result.txt
            fi
          done
      - name: Final
        id: final
        run: |
          FINAL=$(jq -Rs '[ split("\n")[] | select(length > 0) 
                    | split(",") | {image: .[0], status: .[1]} ]' result.txt)
          echo $FINAL

      - uses: ben-z/actions-comment-on-issue@1.0.2
        with:
          message: ${{ steps.final.outputs.stdout }} 
          GITHUB_TOKEN: ${GITHUB_TOKEN}